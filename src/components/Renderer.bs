sub init()
    m.scroller = m.top.findNode("scroller")
    m.top.observeField("focusedChild", "onFocus")
end sub

sub onFocus()
    ' forward focus to scroller
    if m.top.hasFocus()
        m.scroller.setFocus(true)
    end if
end sub

sub render(nodes as object, scrollable = true as boolean)
    m.scrollable = scrollable

    itemSpacing = applyDefaultInt(m.top.itemSpacing, 20)
    m.content = CreateObject("roSGNode", "LayoutGroup")
    m.content.layoutDirection = "vert"
    m.content.itemSpacings = [itemSpacing]

    padding = applyDefaultPadding(m.top.padding, [0, 0, 0, 0])
    width = m.top.width - padding[1] - padding[3]
    height = m.top.height - padding[0] - padding[2]

    m.children = createChildren(nodes, width, height, itemSpacing)
    m.content.appendChildren(m.children)

    m.scroller.width = width
    m.scroller.height = height
    m.scroller.translation = [padding[3], padding[0]]
    m.scroller@.setContent(m.content, m.scrollable)
end sub

function applyDefault(value as dynamic, defaultValue as dynamic) as dynamic
    if value = invalid then return defaultValue
    return value
end function

function applyDefaultStr(value as dynamic, defaultValue as dynamic) as dynamic
    if value = invalid or value = "" then return defaultValue
    return value
end function

function applyDefaultInt(value as integer, defaultValue as integer) as integer
    if value = 0 then return defaultValue
    return value
end function

function applyDefaultPadding(values as dynamic, defaultValues as object) as object
    if values = invalid then len = 0 else len = values.count()
    if len = 0
        values = defaultValues
    else if len = 1
        v0 = values[0]
        values = [v0, v0, v0, v0]
    else if len = 2
        v0 = values[0]
        v1 = values[1]
        values = [v0, v1, v0, v1]
    else if len = 3
        values[3] = values[1]
    end if
    return values
end function

function createLabel(text as string, font as object, color as string, align as string, width as integer) as object
    label = CreateObject("roSGNode", "Label")
    label.update({
        text: text,
        font: font,
        color: color,
        horizAlign: align,
        wrap: width > 0,
        width: width
    })
    return label
end function

function isIdentifier(s) as boolean
    return s <> invalid and s <> "" and left(s, 1) <> "#" and left(s, 2) <> "0x"
end function

function withBackground(child as object, padding as object, bgColor as string, width as integer) as object
    rect = child.boundingRect()
    height = rect.height + padding[0] + padding[2]
    if isIdentifier(lcase(bgColor))
        block = createObject("roSGNode", bgColor)
        block.size = [width, height]
    else
        block = createObject("roSGNode", "Rectangle")
        block.update({
            width: width,
            height: height,
            color: bgColor
        })
    end if
    child.translation = [padding[3], padding[0]]
    block.appendChild(child)
    return block
end function

function createHr(color as string, size as integer, spacing as integer, width as integer) as object
    block = createObject("roSGNode", "Rectangle")
    block.update({
        width: 1,
        height: spacing * 2,
        color: "#00000000"
    })
    hr = block.createChild("Rectangle")
    hr.update({
        width: width,
        height: size,
        translation: [0, int(spacing - size / 2)]
    })
    return block
end function

function collectFonts() as object
    pFont = applyDefault(m.top.font, "font:SmallSystemFont")
    quoteFont = applyDefault(m.top.quoteFont, pFont)
    codeFont = applyDefault(m.top.codeFont, pFont)
    h1Font = applyDefault(m.top.h1Font, "font:LargeBoldSystemFont")
    h2Font = applyDefault(m.top.h2Font, "font:MediumBoldSystemFont")
    h3Font = applyDefault(m.top.h3Font, "font:SmallBoldSystemFont")
    h4Font = applyDefault(m.top.h4Font, "font:SmallBoldSystemFont")

    return {
        h1: h1Font,
        h2: h2Font,
        h3: h3Font,
        h4: h4Font,
        quote: quoteFont,
        code: codeFont,
        p: pFont
    }
end function

function collectColors() as object
    pColor = applyDefaultStr(m.top.color, "0xFFFFFFFF")
    quoteColor = applyDefaultStr(m.top.quoteColor, pColor)
    quoteBg = applyDefaultStr(m.top.quoteBackground, "0xFFFFFF22")
    codeColor = applyDefaultStr(m.top.codeColor, pColor)
    codeBg = applyDefaultStr(m.top.codeBackground, "0xFFFFFF22")
    h1Color = applyDefaultStr(m.top.h1Color, pColor)
    h2Color = applyDefaultStr(m.top.h2Color, pColor)
    h3Color = applyDefaultStr(m.top.h3Color, pColor)
    h4Color = applyDefaultStr(m.top.h4Color, pColor)
    hrColor = applyDefaultStr(m.top.hrColor, pColor)

    return {
        p: pColor,
        h1: h1Color,
        h2: h2Color,
        h3: h3Color,
        h4: h4Color,
        quote: quoteColor,
        quoteBg: quoteBg,
        code: codeColor,
        codeBg: codeBg,
        hr: hrColor
    }
end function

function collectAligns() as object
    pAlign = applyDefaultStr(m.top.Align, "left")
    quoteAlign = applyDefaultStr(m.top.quoteAlign, pAlign)
    codeAlign = applyDefaultStr(m.top.codeAlign, pAlign)
    h1Align = applyDefaultStr(m.top.h1Align, pAlign)
    h2Align = applyDefaultStr(m.top.h2Align, pAlign)
    h3Align = applyDefaultStr(m.top.h3Align, pAlign)
    h4Align = applyDefaultStr(m.top.h4Align, pAlign)

    return {
        p: pAlign,
        h1: h1Align,
        h2: h2Align,
        h3: h3Align,
        h4: h4Align,
        quote: quoteAlign,
        code: codeAlign
    }
end function

function createChildren(nodes as object, width as integer, height as integer, itemSpacing as integer) as object
    fonts = collectFonts()
    colors = collectColors()
    aligns = collectAligns()
    quotePadding = applyDefaultPadding(m.top.quotePadding, [10, 10, 10, 10])
    codePadding = applyDefaultPadding(m.top.codePadding, [10, 10, 10, 50])
    hrSize = applyDefaultInt(m.top.hrSize, 2)

    checkHeight = true
    contentHeight = 0

    children = []
    count = nodes.count() - 1
    for i = 0 to count
        node = nodes[i]
        kind = node.kind
        data = node.data

        if kind = "hr"
            label = invalid
            block = createHr(colors.hr, hrSize, itemSpacing, width)
            children.push(block)
        else if left(kind, 1) = "h"
            font = applyDefault(fonts[kind], fonts.h4)
            color = applyDefault(colors[kind], colors.h4)
            align = applyDefault(aligns[kind], aligns.h4)
            label = createLabel(data, font, color, align, width)
            children.push(label)
        else if kind = "ul"
            label = createLabel(" •  " + data.join(chr(10) + " •  "), fonts.p, colors.p, aligns.p, width)
            children.push(label)
        else if kind = "ol"
            text = ""
            for j = 0 to data.count() - 1
                text = text + " " + (j + 1).toStr() + ". " + data[j] + chr(10)
            end for
            label = createLabel(text, fonts.p, colors.p, aligns.p, width)
            children.push(label)
        else if kind = "quote"
            innerWidth = width - quotePadding[1] - quotePadding[3]
            label = createLabel(data, fonts.quote, colors.quote, aligns.quote, innerWidth)
            block = withBackground(label, quotePadding, colors.quoteBg, width)
            children.push(block)
        else if kind = "code"
            innerWidth = width - codePadding[1] - codePadding[3]
            label = createLabel(data, fonts.code, colors.code, aligns.code, innerWidth)
            block = withBackground(label, codePadding, colors.codeBg, width)
            children.push(block)
        else
            label = createLabel(data, fonts.p, colors.p, aligns.p, width)
            children.push(label)
        end if

        ' overflow check
        if checkHeight
            last = children.peek()
            if last <> invalid
                rect = last.boundingRect()
                prevHeight = contentHeight
                contentHeight += rect.height
                if contentHeight > height and kind <> "hr" ' block overflows
                    checkHeight = false
                    m.top.overflows = true
                    if not m.scrollable
                        if label <> invalid ' text ellipsis
                            label.ellipsizeOnBoundary = true
                            label.height = height - prevHeight
                        end if
                        exit for
                    end if
                else ' next block may be off screen
                    contentHeight += itemSpacing
                    if contentHeight > height and i < count
                        checkHeight = false
                        m.top.overflows = true
                        if not m.scrollable then exit for
                    end if
                end if
            end if
        end if
    end for
    return children
end function
